generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BROKER
  CUSTOMER
}

enum PropertyType {
  HOUSE
  APARTMENT
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  INACTIVE
}

enum DepositStatus {
  PENDING
  PAID
  FAILED
}

enum InquiryStatus {
  OPEN
  RESPONDED
  CLOSED
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  hashedPassword String
  name           String?
  role           Role      @default(CUSTOMER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  brokerProfile  BrokerProfile?
  properties     Property[]
  inquiries      Inquiry[]
  deposits       Deposit[]
  verifiedDeposits Deposit[] @relation("DepositVerifier")
}

model BrokerProfile {
  id               Int           @id @default(autoincrement())
  userId           Int           @unique
  phone            String?
  companyName      String?
  active           Boolean       @default(false)
  approvedByAdmin  Boolean       @default(false)
  approvedAt       DateTime?
  depositStatus    DepositStatus @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user             User          @relation(fields: [userId], references: [id])
}

model Property {
  id          Int            @id @default(autoincrement())
  title       String
  description String         @db.Text
  price       Decimal        @db.Decimal(12, 2)
  currency    String         @default("ETB")
  country     String?
  state       String?
  city        String?
  address     String?
  type        PropertyType
  status      PropertyStatus @default(PENDING)
  brokerId    Int
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  broker      User           @relation(fields: [brokerId], references: [id])
  images      PropertyImage[]
  inquiries   Inquiry[]
}

model PropertyImage {
  id         Int      @id @default(autoincrement())
  propertyId Int
  url        String
  publicId   String?
  sortOrder  Int      @default(0)

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Inquiry {
  id          Int           @id @default(autoincrement())
  propertyId  Int
  customerId  Int?
  name        String
  email       String
  phone       String?
  message     String        @db.Text
  status      InquiryStatus @default(OPEN)
  createdAt   DateTime      @default(now())

  property    Property      @relation(fields: [propertyId], references: [id])
  customer    User?         @relation(fields: [customerId], references: [id])
}

model Deposit {
  id              Int           @id @default(autoincrement())
  brokerId        Int
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("ETB")
  status          DepositStatus @default(PENDING)
  paymentMethod   String        @default("BANK_TRANSFER")
  bankReference   String?
  bankName        String?
  accountNumber   String?
  transactionId   String?
  receiptUrl      String?
  adminNotes      String?
  createdAt       DateTime      @default(now())
  verifiedAt      DateTime?
  verifiedBy      Int?

  broker          User          @relation(fields: [brokerId], references: [id])
  verifier        User?         @relation("DepositVerifier", fields: [verifiedBy], references: [id])
}